local _rect = {}
_rect.__index = _rect

function new(x, y, w, h)
	local o
	if type(x) == "table" then
		o = x
		o.x = o.x or 1
		o.y = o.y or 1
		o.width = o.width or 0
		o.height = o.height or 0
	else
		o = {}
		o.x = x
		o.y = y
		o.width = w
		o.height = h
	end
	
	setmetatable(o, _rect)
	return o
end

function _rect:contains(x, y)
	return x >= self.x and y >= self.y and
		x < self.x+self.width and y < self.y+self.height
end

function intersects(r1, r2)
	return r1:contains(r2.x, r2.y) or
		r1:contains(r2:right(), r2.y) or
		r1:contains(r2.x, r2:bottom()) or
		r1:contains(r2:right(), r2:bottom())
end

function _rect:intersects(r)
	return intersects(self, r) or intersects(r, self)
end

function _rect:inset(amt)
	if type(amt) == "number" then
		amt = { amt, amt, amt, amt }
	end
	return rect.new(self.x+amt[4], self.y+amt[1],
		self.width-amt[2]-amt[4], self.height-amt[1]-amt[3])
end

function _rect:fill(screen, color)
 if type(screen) ~= "table" or type(color) ~= "number" then
  error("Bad argument to fill", 2)
 end
	if self.width <= 0 or self.height <= 0 then
		return
	end
	screen.setBackgroundColor(color)
	for y = self.y, self.y + self.height-1 do
		screen.setCursorPos(self.x, y)
		screen.write((" "):rep(self.width))
	end
end

function _rect:right()
	return self.x + self.width - 1
end

function _rect:bottom()
	return self.y + self.height - 1
end