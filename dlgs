-- some generic dialog popups

os.loadAPI("extlib/gui")

function newMessageBox(context, rf, text, ...)
	if type(context) ~= "table" or type(text) ~= "string" then
		error("Incorrect args to msgbox.")
	end
	
	local btns = { ... }
	local btnw = 0
	for _,b in ipairs(btns) do
		btnw = btnw + #b + 2
	end
	
	local w = math.max(#text, btnw + #btns - 1) + 2
	local h = 7
	local x = math.max(0, math.floor((context.screen.getSize() - w) / 2 + 1))
	local y = math.max(0, math.floor((select(2, context.screen.getSize()) - h) / 2))
	
	local o = context:newOverlay {
		bounds = rect.new(x, y, w, h),
		exclusive = true,
		onSet = function(self)
			context.selectedWidget = self.widgets[#self.widgets]
		end,
		widgets = {
			gui.newLabel {
				bounds = rect.new(2, 2, w - 2, 1),
				text = text
			}
		}
	}
	
	local bx = 2
	for i,caption in ipairs(btns) do
		local bw = (#caption + 2) * (w - 1 - #btns) / btnw
		if i == #btns then
			bw = w - bx + 0.5
		end
		table.insert(o.widgets, gui.newButton {
			text = caption,
			bounds = rect.new(bx, 4, bw, 3),
			parent = o,
			click = function(self)
				self.parent:hide()
				if rf then rf(i) end
			end
		})
		bx = bx + bw + 1
	end
	
	return o
end

function msgbox(...)
	newMessageBox(...):show()
end

function newPopupMenu(cxt, x, y, menu)
	if not cxt and not btn then
		error("Expects context and button", 2)
	end
	
	local w = 2
	local h = 2
	for _,v in pairs(menu) do
		local text = v[1]
		
		if #text + 4 > w then
			w = #text + 4
		end
		h = h + 1
	end
	
	local bounds = rect.new(x, y, w, h)
	if bounds:right() > cxt.screen.getSize() then
		-- right-aligned
		bounds.x = x - bounds.width + 1
	end
	
	local o = cxt:newOverlay {
		exclusive = true,
		bounds = bounds,
		onOut = function(self)
			self:hide()
		end,
		widgets = { }
	}
	
	local y = 2
	for _,t in ipairs(menu) do
		local name, fn = unpack(t)
		local btn = gui.newButton {
			parent = o,
			text = name,
			bounds = rect.new(2, y, w - 2, 1),
			click = function(self)
				self.parent:hide()
				fn(o)
			end
		}
		y = y + 1
	end
	
	return o
end

function newTitleBar(o)	
	o.bounds = o.bounds or rect.new(5, 1, -8, 1)
	o.color = o.color or colors.cyan
	
	return gui.newLabel(o)
end

function newCloseButton(btn)	
	btn.text = btn.text or "X"
	btn.bounds = btn.bounds or rect.new(-3, 1, 3, 1)
	btn.color = btn.color or colors.red
	btn.highlight = btn.highlight or colors.pink
	btn.click = btn.click or function(self)
		self.parent.context:stop()
	end
	
	return gui.newButton(btn)
end

function newMenuButton(btn)
	btn.text = btn.text or "_"
	btn.bounds = btn.bounds or rect.new(1, 1, 3, 1)
	
	local btn = gui.newButton(btn)
	
	function btn:click()
		local px = self.parent.bounds and self.parent.bounds.x or 1
		local py = self.parent.bounds and self.parent.bounds.y or 1
		local x = px + self.bounds.x - 1 >
			self.parent.context.width / 2 and
			px + self.bounds:right() - 1 or
			px + self.bounds.x - 1
		newPopupMenu(self.parent.context, x, py + self.bounds:bottom(), self.menu)
			:show()
	end
	
	return btn
end

local _combobox = {}
_combobox.__index = _combobox

function newCombobox(w)
	w.items = w.items or {}
	w.selectedItem = w.selectedItem or 0
	
	return gui.newWidget(w, _combobox)
end

function _combobox:draw(highlight)
	local screen = self.parent.screen
	
	self.bounds:fill(screen, highlight and colors.yellow or colors.brown)
	
	screen.setTextColor(highlight and colors.black or colors.white)
	screen.setCursorPos(self.bounds.x + 1, self.bounds.y)
	local t = (self.selectedItem >= 1 and self.selectedItem <= #self.items) and self.items[self.selectedItem] or ""
	screen.write(t)
	screen.setCursorPos(self.bounds:right() - 1, self.bounds.y)
	screen.write("_")
	
	if self.parent.context.selectedWidget == self then
		screen.setCursorPos(self.bounds.x, self.bounds.y)
		screen.write("[")
		screen.setCursorPos(self.bounds:right(), self.bounds.y)
		screen.write("]")
	end
end

function _combobox:mouseDown()
	self:draw(true)
end

function _combobox:mouseUp()
	self:draw(false)
end

function _combobox:click()
	local cw, ch = 0, 0
	
	for i,v in ipairs(self.items) do
		cw = math.max(cw, #v + 3)
		ch = ch + 1
	end
	
	local px = self.parent.bounds and self.parent.bounds.x or 1
	local py = self.parent.bounds and self.parent.bounds.y or 1
	local r = rect.new(px + self.bounds:right() - cw - 2, py + self.bounds.y, cw + 2, ch + 2)
	
	local o = self.parent.context:newOverlay {
		combobox = self,
		exclusive = true,
		bounds = r,
		onOut = function(self)
			self:hide()
			self:select(self.oldSelection)
		end,
		onSet = function(self)
			self.oldSelection = self.context.selectedWidget
			self.context.selectedWidget = self.widgets[1]
		end,
		widgets = {
			gui.newListBox {
				bounds = rect.new(2, 2, cw, ch),
				items = self.items,
				selectedItem = self.selectedItem,
				autoSelect = false,
				select = function(self)
					self.parent.combobox.selectedItem = self.selectedItem
					self.parent:onOut()
					self.parent.combobox.parent:select(self.parent.combobox)
					if self.parent.combobox.select then
						self.parent.combobox:select()
					end
				end,
			}
		}
	}
	
	o:show()
end

function newFormRoot(tab)
	tab.bounds = tab.bounds or rect.new(1, 3, 0, -2)
	return layout.newLayoutRoot(tab)
end

function newOverlayRoot(tab)
	tab.bounds = tab.bounds or rect.new(2, 3, -2, -3)
	return layout.newLayoutRoot(tab)
end
